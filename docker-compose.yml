services:

  redis:
    image: redis:latest
    restart: on-failure
    expose:
      - "6379"
    networks:
      - my_network

  db:
    image: postgres:16-alpine
    restart: on-failure
    env_file:
      - ./.env
    expose:
      - "5432"
    volumes:
      - pg_data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -d ${POSTGRES_DB} -U ${POSTGRES_USER}" ]
      interval: 10s
      retries: 5
      timeout: 5s
    networks:
      - my_network

  app:
    build: .
    tty: true
    ports:
      - "8000:8000"
    command: sh -c "python manage.py migrate && python manage.py runserver 0.0.0.0:8000"
    volumes:
      - .:/app
    env_file:
      - ./.env
    networks:
      - my_network

  celery:
    build: .
    tty: true
    command: celery -A config worker -l INFO -P eventlet
    restart: on-failure
    volumes:
      - .:/app
    depends_on:
      - redis
      - db
      - app
    env_file:
      - ./.env
    networks:
      - my_network

  celery-beat:
    build: .
    tty: true
    command: celery -A config beat -l INFO
    restart: on-failure
    volumes:
      - .:/app
    depends_on:
      - redis
      - db
      - app
    env_file:
      - ./.env
    networks:
      - my_network

volumes:
  pg_data:

networks:
  my_network:
    driver: bridge